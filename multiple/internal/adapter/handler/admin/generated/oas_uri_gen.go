// Code generated by ogen, DO NOT EDIT.

package generated

import (
	"math/bits"
	"strconv"

	"github.com/go-faster/errors"

	"github.com/ogen-go/ogen/conv"
	"github.com/ogen-go/ogen/uri"
	"github.com/ogen-go/ogen/validate"
)

// EncodeURI encodes TenantClient as URI form.
func (s *TenantClient) EncodeURI(e uri.Encoder) error {
	if err := e.EncodeField("name", func(e uri.Encoder) error {
		return e.EncodeValue(conv.StringToString(s.Name))
	}); err != nil {
		return errors.Wrap(err, "encode field \"name\"")
	}
	return nil
}

var uriFieldsNameOfTenantClient = [1]string{
	0: "name",
}

// DecodeURI decodes TenantClient from URI form.
func (s *TenantClient) DecodeURI(d uri.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TenantClient to nil")
	}
	var requiredBitSet [1]uint8

	if err := d.DecodeFields(func(k string, d uri.Decoder) error {
		switch k {
		case "name":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				s.Name = c
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		default:
			return nil
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TenantClient")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00000001,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(uriFieldsNameOfTenantClient) {
					name = uriFieldsNameOfTenantClient[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}
